{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///A:/Projects/futureflow/actions/user.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { db } from \"@/lib/prisma\";\r\n\r\nexport async function updatedUser(data) {\r\n  const { userId } = await auth();\r\n  if (!userId) {\r\n    throw new Error(\"User not authenticated\");\r\n  }\r\n\r\n  const user = await db.user.findUnique({\r\n    where: {\r\n      clerkUserId: userId,\r\n    },\r\n  });\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  try {\r\n    //Transaction means that in callback check everything is done check all the mention function or if not then show error\r\n    const result = await db.$transaction(\r\n      async (tx) => {\r\n        //find if the industry exists\r\n        let industryInsight = await tx.industryInsight.findUnique({\r\n          where: {\r\n            industry: data.industry,\r\n          },\r\n        });\r\n        // If industry doesn't exits, create it with default values - will replace with ai\r\n        if (!industryInsight) {\r\n         const insights = await genereateAIInsight(user.industry);\r\n         \r\n              industryInsight = await db.industryInsight.create({\r\n               data: {\r\n                 industry: user.industry,\r\n                 ...insights,\r\n                 nextUpdate: new Date(Date, now() + 7 * 24 * 60 * 60 * 1000),\r\n               },\r\n             });\r\n        }\r\n\r\n        //update the user\r\n        const updatedUser = await tx.user.update({\r\n          where: {\r\n            id: user.id,\r\n          },\r\n          data: {\r\n            industry: data.industry,\r\n            experience: data.experience,\r\n            bio: data.bio,\r\n            skills: data.skills,\r\n          },\r\n        });\r\n\r\n        return { updatedUser, industryInsight };\r\n      },\r\n      {\r\n        timeout: 10000, // 10 seconds\r\n      }\r\n    );\r\n    return {success:true,...result};\r\n  } catch (error) {\r\n    console.error(\"Error updating user and industry:\", error.message);\r\n    throw new Error(\"Failed to update user\"+ error.message);\r\n  }\r\n}\r\n\r\nexport async function getUserOnboardingStatus() {\r\n  const { userId } = await auth();\r\n  if (!userId) {\r\n    throw new Error(\"User not authenticated\");\r\n  }\r\n  const user = await db.user.findUnique({\r\n    where: {\r\n      clerkUserId: userId,\r\n    },\r\n  });\r\n  if (!user) {\r\n    throw new Error(\"User not found\");\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n        where: {\r\n          clerkUserId: userId,\r\n        },\r\n        select: {\r\n          industry: true,\r\n        },\r\n    })\r\n\r\n    return {\r\n        isOnboarded: !!user?.industry, \r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching user onboarding status:\", error.message);\r\n    throw new Error(\"Failed to fetch user onboarding status\");\r\n    \r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAEO,eAAe,YAAY,IAAI;IACpC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,OAAO,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,OAAO;YACL,aAAa;QACf;IACF;IACA,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,sHAAsH;QACtH,MAAM,SAAS,MAAM,6GAAA,CAAA,KAAE,CAAC,YAAY,CAClC,OAAO;YACL,6BAA6B;YAC7B,IAAI,kBAAkB,MAAM,GAAG,eAAe,CAAC,UAAU,CAAC;gBACxD,OAAO;oBACL,UAAU,KAAK,QAAQ;gBACzB;YACF;YACA,kFAAkF;YAClF,IAAI,CAAC,iBAAiB;gBACrB,MAAM,WAAW,MAAM,mBAAmB,KAAK,QAAQ;gBAElD,kBAAkB,MAAM,6GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,MAAM,CAAC;oBACjD,MAAM;wBACJ,UAAU,KAAK,QAAQ;wBACvB,GAAG,QAAQ;wBACX,YAAY,IAAI,KAAK,MAAM,QAAQ,IAAI,KAAK,KAAK,KAAK;oBACxD;gBACF;YACL;YAEA,iBAAiB;YACjB,MAAM,cAAc,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACvC,OAAO;oBACL,IAAI,KAAK,EAAE;gBACb;gBACA,MAAM;oBACJ,UAAU,KAAK,QAAQ;oBACvB,YAAY,KAAK,UAAU;oBAC3B,KAAK,KAAK,GAAG;oBACb,QAAQ,KAAK,MAAM;gBACrB;YACF;YAEA,OAAO;gBAAE;gBAAa;YAAgB;QACxC,GACA;YACE,SAAS;QACX;QAEF,OAAO;YAAC,SAAQ;YAAK,GAAG,MAAM;QAAA;IAChC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC,MAAM,OAAO;QAChE,MAAM,IAAI,MAAM,0BAAyB,MAAM,OAAO;IACxD;AACF;AAEO,eAAe;IACpB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,mLAAA,CAAA,OAAI,AAAD;IAC5B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,OAAO,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QACpC,OAAO;YACL,aAAa;QACf;IACF;IACA,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,OAAO;gBACL,aAAa;YACf;YACA,QAAQ;gBACN,UAAU;YACZ;QACJ;QAEA,OAAO;YACH,aAAa,CAAC,CAAC,MAAM;QACzB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C,MAAM,OAAO;QACrE,MAAM,IAAI,MAAM;IAElB;AACF;;;IAhGsB;IAgEA;;AAhEA,+OAAA;AAgEA,+OAAA","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///A:/Projects/futureflow/app/%28main%29/dashboard/page.jsx"],"sourcesContent":["import { getUserOnboardingStatus } from \"@/actions/user\";\r\nimport { redirect } from \"next/navigation\";\r\nimport React from \"react\";\r\n\r\nconst IndustryInsightsPage = async () => {\r\n  const { isOnboarded } = await getUserOnboardingStatus();\r\n\r\n  if (!isOnboarded) {\r\n    redirect(\"/onboarding\");\r\n  }\r\n\r\n  return <div>IndustryInsightsPage</div>;\r\n};\r\n\r\nexport default IndustryInsightsPage;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;;;;;AAEA,MAAM,uBAAuB;IAC3B,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAA,GAAA,+GAAA,CAAA,0BAAuB,AAAD;IAEpD,IAAI,CAAC,aAAa;QAChB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,qBAAO,8OAAC;kBAAI;;;;;;AACd;uCAEe","debugId":null}}]
}