{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///A:/Projects/futureflow/actions/interview.js"],"sourcesContent":["\"use server\";\r\n\r\nimport { db } from \"@/lib/prisma\";\r\nimport { auth } from \"@clerk/nextjs/server\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\r\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\nexport async function generateQuiz() {\r\n  const { userId } = await auth();\r\n  if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { clerkUserId: userId },\r\n    select: {\r\n      industry: true,\r\n      skills: true,\r\n    },\r\n  });\r\n\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  const prompt = `\r\n    Generate 10 technical interview questions for a ${\r\n      user.industry\r\n    } professional${\r\n    user.skills?.length ? ` with expertise in ${user.skills.join(\", \")}` : \"\"\r\n  }.\r\n    \r\n    Each question should be multiple choice with 4 options.\r\n    \r\n    Return the response in this JSON format only, no additional text:\r\n    {\r\n      \"questions\": [\r\n        {\r\n          \"question\": \"string\",\r\n          \"options\": [\"string\", \"string\", \"string\", \"string\"],\r\n          \"correctAnswer\": \"string\",\r\n          \"explanation\": \"string\"\r\n        }\r\n      ]\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const result = await model.generateContent(prompt);\r\n    const response = result.response;\r\n    const text = response.text();\r\n    const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\r\n    const quiz = JSON.parse(cleanedText);\r\n\r\n    return quiz.questions;\r\n  } catch (error) {\r\n    console.error(\"Error generating quiz:\", error);\r\n    throw new Error(\"Failed to generate quiz questions\");\r\n  }\r\n}\r\n\r\nexport async function saveQuizResult(questions, answers, score) {\r\n  const { userId } = await auth();\r\n  if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { clerkUserId: userId },\r\n  });\r\n\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  const questionResults = questions.map((q, index) => ({\r\n    question: q.question,\r\n    answer: q.correctAnswer,\r\n    userAnswer: answers[index],\r\n    isCorrect: q.correctAnswer === answers[index],\r\n    explanation: q.explanation,\r\n  }));\r\n\r\n  // Get wrong answers\r\n  const wrongAnswers = questionResults.filter((q) => !q.isCorrect);\r\n\r\n  // Only generate improvement tips if there are wrong answers\r\n  let improvementTip = null;\r\n  if (wrongAnswers.length > 0) {\r\n    const wrongQuestionsText = wrongAnswers\r\n      .map(\r\n        (q) =>\r\n          `Question: \"${q.question}\"\\nCorrect Answer: \"${q.answer}\"\\nUser Answer: \"${q.userAnswer}\"`\r\n      )\r\n      .join(\"\\n\\n\");\r\n\r\n    const improvementPrompt = `\r\n      The user got the following ${user.industry} technical interview questions wrong:\r\n\r\n      ${wrongQuestionsText}\r\n\r\n      Based on these mistakes, provide a concise, specific improvement tip.\r\n      Focus on the knowledge gaps revealed by these wrong answers.\r\n      Keep the response under 2 sentences and make it encouraging.\r\n      Don't explicitly mention the mistakes, instead focus on what to learn/practice.\r\n    `;\r\n\r\n    try {\r\n      const tipResult = await model.generateContent(improvementPrompt);\r\n\r\n      improvementTip = tipResult.response.text().trim();\r\n      console.log(improvementTip);\r\n    } catch (error) {\r\n      console.error(\"Error generating improvement tip:\", error);\r\n      // Continue without improvement tip if generation fails\r\n    }\r\n  }\r\n\r\n  try {\r\n    const assessment = await db.assessment.create({\r\n      data: {\r\n        userId: user.id,\r\n        quizScore: score,\r\n        questions: questionResults,\r\n        category: \"Technical\",\r\n        improvementTip,\r\n      },\r\n    });\r\n\r\n    return assessment;\r\n  } catch (error) {\r\n    console.error(\"Error saving quiz result:\", error);\r\n    throw new Error(\"Failed to save quiz result\");\r\n  }\r\n}\r\n\r\nexport async function getAssessments() {\r\n  const { userId } = await auth();\r\n  if (!userId) throw new Error(\"Unauthorized\");\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { clerkUserId: userId },\r\n  });\r\n\r\n  if (!user) throw new Error(\"User not found\");\r\n\r\n  try {\r\n    const assessments = await db.assessment.findMany({\r\n      where: {\r\n        userId: user.id,\r\n      },\r\n      orderBy: {\r\n        createdAt: \"asc\",\r\n      },\r\n    });\r\n\r\n    return assessments;\r\n  } catch (error) {\r\n    console.error(\"Error fetching assessments:\", error);\r\n    throw new Error(\"Failed to fetch assessments\");\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IASsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///A:/Projects/futureflow/hooks/use-fetch.js"],"sourcesContent":["import { toast } from \"sonner\";\r\n\r\nconst { useState } = require(\"react\");\r\n\r\nconst useFetch = (cb) => {\r\n  const [data, setData] = useState(undefined);\r\n  const [loading, setLoading] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fn = async (...args) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await cb(...args);\r\n      setData(response);\r\n      setError(null);\r\n    } catch (error) {\r\n      setError(error);\r\n      toast.error(\r\n        `Error: ${error.message || \"An unexpected error occurred\"}`\r\n      );\r\n    }\r\n    finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    fn,\r\n  };\r\n};\r\n\r\nexport default useFetch;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,EAAE,QAAQ,EAAE;AAElB,MAAM,WAAW,CAAC;IAChB,MAAM,CAAC,MAAM,QAAQ,GAAG,SAAS;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,SAAS;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,SAAS;IAEnC,MAAM,KAAK,OAAO,GAAG;QACnB,WAAW;QACX,SAAS;QAET,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,QAAQ;YACR,SAAS;QACX,EAAE,OAAO,OAAO;YACd,SAAS;YACT,wIAAA,CAAA,QAAK,CAAC,KAAK,CACT,CAAC,OAAO,EAAE,MAAM,OAAO,IAAI,gCAAgC;QAE/D,SACQ;YACN,WAAW;QACb;IACF;IAEA,OAAO;QACL;QACA;QACA;QACA;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///A:/Projects/futureflow/app/%28main%29/interview/_components/quiz.jsx"],"sourcesContent":["\"use client\";\r\nimport { generateQuiz } from \"@/actions/interview\";\r\nimport useFetch from \"@/hooks/use-fetch\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Quiz = () => {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [showExplanation, setShowExplanation] = useState(false);\r\n\r\n  const {\r\nloading:gene\r\n  } = useFetch(generateQuiz)\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default Quiz;\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAHA;;;;;AAKA,MAAM,OAAO;IACX,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzC,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,MAAM,EACR,SAAQ,IAAI,EACT,GAAG,CAAA,GAAA,qHAAA,CAAA,UAAQ,AAAD,EAAE,+IAAA,CAAA,eAAY;IAEzB,qBAAO,8OAAC;;;;;AACV;uCAEe","debugId":null}}]
}